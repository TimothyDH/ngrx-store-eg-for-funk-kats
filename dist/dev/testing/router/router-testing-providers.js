"use strict";
var common_1 = require('@angular/common');
var router_1 = require('@angular/router');
var testing_1 = require('@angular/common/testing');
var router_testing_module_1 = require('@angular/router/testing/router_testing_module');
var core_1 = require('@angular/core');
var mock_location_strategy_1 = require('./mock-location-strategy');
exports.provideFakeRouter = function (rootComponentType, config) {
    if (config === void 0) { config = []; }
    return [
        router_1.RouterOutletMap,
        { provide: router_1.UrlSerializer, useClass: router_1.DefaultUrlSerializer },
        { provide: common_1.Location, useClass: testing_1.SpyLocation },
        { provide: core_1.NgModuleFactoryLoader, useClass: router_testing_module_1.SpyNgModuleFactoryLoader },
        { provide: common_1.LocationStrategy, useClass: mock_location_strategy_1.MockLocationStrategy },
        {
            provide: router_1.Router,
            useFactory: function (resolver, urlSerializer, outletMap, location, injector, ngModuleFactoryLoader) {
                return new router_1.Router(rootComponentType, resolver, urlSerializer, outletMap, location, injector, ngModuleFactoryLoader, config);
            },
            deps: [core_1.ComponentResolver, router_1.UrlSerializer, router_1.RouterOutletMap, common_1.Location, core_1.Injector]
        },
        {
            provide: router_1.ActivatedRoute,
            useFactory: function (r) { return r.routerState.root; },
            deps: [router_1.Router]
        },
    ];
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rpbmcvcm91dGVyL3JvdXRlci10ZXN0aW5nLXByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBTUEsdUJBQXlDLGlCQUFpQixDQUFDLENBQUE7QUFDM0QsdUJBT08saUJBQWlCLENBQUMsQ0FBQTtBQUN6Qix3QkFBMEIseUJBQXlCLENBQUMsQ0FBQTtBQUNwRCxzQ0FBdUMsK0NBQStDLENBQUMsQ0FBQTtBQUN2RixxQkFBdUUsZUFBZSxDQUFDLENBQUE7QUFDdkYsdUNBQW1DLDBCQUEwQixDQUFDLENBQUE7QUFFakQseUJBQWlCLEdBQUcsVUFBQyxpQkFBdUIsRUFBRSxNQUF5QjtJQUF6QixzQkFBeUIsR0FBekIsV0FBeUI7SUFDbEYsTUFBTSxDQUFDO1FBQ0wsd0JBQWU7UUFDZixFQUFFLE9BQU8sRUFBRSxzQkFBYSxFQUFFLFFBQVEsRUFBRSw2QkFBb0IsRUFBRTtRQUMxRCxFQUFFLE9BQU8sRUFBRSxpQkFBUSxFQUFFLFFBQVEsRUFBRSxxQkFBVyxFQUFFO1FBQzVDLEVBQUUsT0FBTyxFQUFFLDRCQUFxQixFQUFFLFFBQVEsRUFBRSxnREFBd0IsRUFBRTtRQUN0RSxFQUFFLE9BQU8sRUFBRSx5QkFBZ0IsRUFBRSxRQUFRLEVBQUUsNkNBQW9CLEVBQUU7UUFDN0Q7WUFDRSxPQUFPLEVBQUUsZUFBTTtZQUNmLFVBQVUsRUFBRSxVQUFDLFFBQTJCLEVBQUUsYUFBNEIsRUFDcEUsU0FBMEIsRUFBRSxRQUFrQixFQUFFLFFBQWtCLEVBQUUscUJBQTRDO2dCQUNoSCxNQUFNLENBQUMsSUFBSSxlQUFNLENBQ2YsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM5RyxDQUFDO1lBQ0QsSUFBSSxFQUFFLENBQUMsd0JBQWlCLEVBQUUsc0JBQWEsRUFBRSx3QkFBZSxFQUFFLGlCQUFRLEVBQUUsZUFBUSxDQUFDO1NBQzlFO1FBQ0Q7WUFDRSxPQUFPLEVBQUUsdUJBQWM7WUFDdkIsVUFBVSxFQUFFLFVBQUMsQ0FBUyxJQUFLLE9BQUEsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQWxCLENBQWtCO1lBQzdDLElBQUksRUFBRSxDQUFDLGVBQU0sQ0FBQztTQUNmO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0aW5nL3JvdXRlci9yb3V0ZXItdGVzdGluZy1wcm92aWRlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG50ZW1wb3JhcnkgbW9jayByb3V0ZXIgcHJvdmlkZXIgdW50aWwgQGFuZ3VsYXIgcHJvdmlkZXMgb25lIChjdXJyZW50bHkgbm90IGV4cG9ydGVkIC8gZXhwZXJpbWVudGFsKVxyXG5jb3BpZWQgZnJvbSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3ByaW5nYm9vdC1hbmd1bGFyMi10dXRvcmlhbC9hbmd1bGFyMi1hcHAvbWFzdGVyL3NyYy9zaGFyZWQvcm91dGVzL3JvdXRlci10ZXN0aW5nLXByb3ZpZGVycy50c1xyXG4qL1xyXG5cclxuXHJcbmltcG9ydCB7TG9jYXRpb24sIExvY2F0aW9uU3RyYXRlZ3l9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7XHJcbiAgUm91dGVyT3V0bGV0TWFwLFxyXG4gIFVybFNlcmlhbGl6ZXIsXHJcbiAgRGVmYXVsdFVybFNlcmlhbGl6ZXIsXHJcbiAgUm91dGVyLFxyXG4gIEFjdGl2YXRlZFJvdXRlLFxyXG4gIFJvdXRlckNvbmZpZ1xyXG59IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7U3B5TG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi90ZXN0aW5nJztcclxuaW1wb3J0IHtTcHlOZ01vZHVsZUZhY3RvcnlMb2FkZXJ9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlci90ZXN0aW5nL3JvdXRlcl90ZXN0aW5nX21vZHVsZSc7XHJcbmltcG9ydCB7Q29tcG9uZW50UmVzb2x2ZXIsIEluamVjdG9yLCBUeXBlLCBOZ01vZHVsZUZhY3RvcnlMb2FkZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge01vY2tMb2NhdGlvblN0cmF0ZWd5fSBmcm9tICcuL21vY2stbG9jYXRpb24tc3RyYXRlZ3knO1xyXG5cclxuZXhwb3J0IGNvbnN0IHByb3ZpZGVGYWtlUm91dGVyID0gKHJvb3RDb21wb25lbnRUeXBlOiBUeXBlLCBjb25maWc6IFJvdXRlckNvbmZpZyA9IFtdKSA9PiB7XHJcbiAgcmV0dXJuIFtcclxuICAgIFJvdXRlck91dGxldE1hcCxcclxuICAgIHsgcHJvdmlkZTogVXJsU2VyaWFsaXplciwgdXNlQ2xhc3M6IERlZmF1bHRVcmxTZXJpYWxpemVyIH0sXHJcbiAgICB7IHByb3ZpZGU6IExvY2F0aW9uLCB1c2VDbGFzczogU3B5TG9jYXRpb24gfSxcclxuICAgIHsgcHJvdmlkZTogTmdNb2R1bGVGYWN0b3J5TG9hZGVyLCB1c2VDbGFzczogU3B5TmdNb2R1bGVGYWN0b3J5TG9hZGVyIH0sXHJcbiAgICB7IHByb3ZpZGU6IExvY2F0aW9uU3RyYXRlZ3ksIHVzZUNsYXNzOiBNb2NrTG9jYXRpb25TdHJhdGVneSB9LFxyXG4gICAge1xyXG4gICAgICBwcm92aWRlOiBSb3V0ZXIsXHJcbiAgICAgIHVzZUZhY3Rvcnk6IChyZXNvbHZlcjogQ29tcG9uZW50UmVzb2x2ZXIsIHVybFNlcmlhbGl6ZXI6IFVybFNlcmlhbGl6ZXIsXHJcbiAgICAgICAgb3V0bGV0TWFwOiBSb3V0ZXJPdXRsZXRNYXAsIGxvY2F0aW9uOiBMb2NhdGlvbiwgaW5qZWN0b3I6IEluamVjdG9yLCBuZ01vZHVsZUZhY3RvcnlMb2FkZXI6IE5nTW9kdWxlRmFjdG9yeUxvYWRlcikgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUm91dGVyKFxyXG4gICAgICAgICAgcm9vdENvbXBvbmVudFR5cGUsIHJlc29sdmVyLCB1cmxTZXJpYWxpemVyLCBvdXRsZXRNYXAsIGxvY2F0aW9uLCBpbmplY3RvciwgbmdNb2R1bGVGYWN0b3J5TG9hZGVyLCBjb25maWcpO1xyXG4gICAgICB9LFxyXG4gICAgICBkZXBzOiBbQ29tcG9uZW50UmVzb2x2ZXIsIFVybFNlcmlhbGl6ZXIsIFJvdXRlck91dGxldE1hcCwgTG9jYXRpb24sIEluamVjdG9yXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogQWN0aXZhdGVkUm91dGUsXHJcbiAgICAgIHVzZUZhY3Rvcnk6IChyOiBSb3V0ZXIpID0+IHIucm91dGVyU3RhdGUucm9vdCxcclxuICAgICAgZGVwczogW1JvdXRlcl1cclxuICAgIH0sXHJcbiAgXTtcclxufTtcclxuXHJcbiJdfQ==
